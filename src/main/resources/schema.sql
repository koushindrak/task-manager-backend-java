CREATE TABLE users (
  id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  firstName VARCHAR(50) NOT NULL,
  lastName VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL,
  phoneNumber VARCHAR(20) NOT NULL,
  status VARCHAR(20) NOT NULL
);

CREATE TABLE groups (
  id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description VARCHAR(255) NOT NULL,
  status VARCHAR(20) NOT NULL,
  owner INT(11) UNSIGNED,
  FOREIGN KEY (owner) REFERENCES users(id)
);

CREATE TABLE user_group (
  userId INT(11) UNSIGNED NOT NULL,
  groupId INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (userId, groupId),
  FOREIGN KEY (userId) REFERENCES users(id),
  FOREIGN KEY (groupId) REFERENCES groups(id)
);

CREATE TABLE projects (
  id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description VARCHAR(255) NOT NULL,
  startDate DATE NOT NULL,
  endDate DATE NOT NULL,
  status VARCHAR(20) NOT NULL,
  userId INT(11) UNSIGNED,
  FOREIGN KEY (userId) REFERENCES users(id)
);

CREATE TABLE tasks (
  id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description VARCHAR(255) NOT NULL,
  dueDate DATE NOT NULL,
  userId INT(11) UNSIGNED,
  FOREIGN KEY (userId) REFERENCES users(id)
);

CREATE TABLE priority (
  id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description VARCHAR(255) NOT NULL,
  value INT(11) NOT NULL,
  status VARCHAR(20) NOT NULL
);

CREATE TABLE label (
  id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description VARCHAR(255) NOT NULL,
  userId INT(11) UNSIGNED,
  FOREIGN KEY (userId) REFERENCES users(id)
);

CREATE TABLE roles (
  id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description VARCHAR(255) NOT NULL,
  type VARCHAR(20) NOT NULL,
  status VARCHAR(20) NOT NULL
);

CREATE TABLE user_role (
  userId INT(11) UNSIGNED NOT NULL,
  roleId INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (userId, roleId),
  FOREIGN KEY (userId) REFERENCES users(id),
  FOREIGN KEY (roleId) REFERENCES roles(id)
);
